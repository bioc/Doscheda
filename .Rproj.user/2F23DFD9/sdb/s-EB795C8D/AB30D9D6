{
    "collab_server" : "",
    "contents" : "#' Method for attaching and standardising data for objects of class 'ChemoProtSet'\n#'\n#' This method will subset the orginal data set into the required columns, standardising column names in the process.\n#'\n#' @param x object of class 'ChemoProtSet'\n#' @param dataFrame data.frame of the input data set\n#' @param dataChannels column names of dataFrame that correspond to data channels. These should be ordered in the format: rep1_concentration_0, ..., rep1_concentration_n, rep2_concentration_0, ...\n#' @param accessionChannel string that is the same as the column name for the protein accessions in dataFrame\n#' @param uniquePeps string that is the same as the column name for the number of unique peptides in dataFrame\n#' @param sequenceChannel string that is the same as the column name for the peptide sequences in dataFrame\n#' @param qualityChannel string that is the same as the column name for the peptide quality score in dataFrame\n#' @param pdofpdChannel string that is the same as the column name for the pull-down of pull-down data in dataFrame\n#' @param incGeneID boolean value indicating if a protein accession to gene ID file is supplied\n#' @param geneIDFile data.frame containing a protein accession to gene ID conversion file\n#'\n#' @return  object of class ChemoProtSet\n#'\n#' @examples\n#'\n#' channelNames <- c(\"Abundance..F1..126..Control..REP_1\",\n#'\"Abundance..F1..127..Sample..REP_1\",  \"Abundance..F1..128..Sample..REP_1\",\n#'  \"Abundance..F1..129..Sample..REP_1\",  \"Abundance..F1..130..Sample..REP_1\",\n#'\"Abundance..F1..131..Sample..REP_1\",  \"Abundance..F2..126..Control..REP_2\",\n#' \"Abundance..F2..127..Sample..REP_2\", \"Abundance..F2..128..Sample..REP_2\",\n#'\"Abundance..F2..129..Sample..REP_2\",  \"Abundance..F2..130..Sample..REP_2\",\n#' \"Abundance..F2..131..Sample..REP_2\")\n#'\n#'ex <- new('ChemoProtSet')\n#'ex<- setParameters(x = ex,chansVal = 6, repsVal = 2,dataTypeStr = 'intensity',\n#' modelTypeStr = 'linear',PDBool = FALSE,removePepsBool = FALSE,\n#' incPDofPDBool = FALSE,incGeneFileBool = FALSE,organismStr = 'H.sapiens', pearsonThrshVal = 0.4)\n#'ex<- setData(x = ex, dataFrame = doschedaData, dataChannels = channelNames,\n#' accessionChannel = \"Master.Protein.Accessions\",\n#' sequenceChannel = 'Sequence',qualityChannel = \"Qvality.PEP\")\n#'\n#'ex\n#'\n#' @export\n#' @docType methods\n#' @rdname setData-methods\n#'\nsetGeneric(name=\"setData\",\n           def=function(x, dataFrame, dataChannels, accessionChannel, uniquePeps = NA, sequenceChannel = NA, qualityChannel = NA, pdofpdChannel = NA, incGeneID = FALSE, geneIDFile = NA)\n           {\n             standardGeneric(\"setData\")\n           }\n)\n\n#' @rdname setData-methods\n#' @aliases setData,ANY,ANY-method\nsetMethod(f=\"setData\",\n          signature=\"ChemoProtSet\",\n          definition=function(x, dataFrame, dataChannels, accessionChannel, uniquePeps = NA, sequenceChannel = NA, qualityChannel = NA, pdofpdChannel = NA, incGeneID = FALSE, geneIDFile = NA)\n          {\n\n\n            if(x@parameters$dataType == 'intensity'){\n              if(x@parameters$incPDofPD == TRUE){\n\n                x@input <- dataFrame[,c(accessionChannel, sequenceChannel, qualityChannel, pdofpdChannel, dataChannels)]\n                colnames(x@input) <- c('Accession', 'Sequence', 'Quality', 'pdofpd', x@parameters$chanNames)\n              }else{\n                x@input <- dataFrame[,c(accessionChannel, sequenceChannel, qualityChannel, dataChannels)]\n                colnames(x@input) <- c('Accession', 'Sequence', 'Quality', x@parameters$chanNames)\n\n              }\n\n            }else{\n\n              if(x@parameters$PD == TRUE){\n                uniPep<- colnames(dataFrame)[grep('unique',colnames(dataFrame),ignore.case = TRUE)]\n                x@input <- dataFrame[,c(accessionChannel, 'Description',uniPep, dataChannels)]\n                colnames(x@input) <- c('Accession', 'Description', 'UniquePeptides', x@parameters$chanNames)\n\n              }else{\n\n                x@input <- dataFrame[,c(accessionChannel, uniquePeps, dataChannels)]\n                colnames(x@input) <- c('Accession', 'UniquePeptides', x@parameters$chanNames)\n              }\n            }\n\n            if(incGeneID == TRUE){\n\n              if(nrow(geneIDFile[,grep('Accession', geneIDFile)]) == 0 ){\n                stop(\"Your Accession to Gene ID conversion file does not contain a column called 'Accession'. Please ensure it contains a column called 'Accession' and a column called 'GeneID'.\")\n              } else if (nrow(geneIDFile[,grep('GeneID', geneIDFile)]) == 0 ){\n\n                stop(\"Your Accession to Gene ID conversion file does not contain a column called 'GeneID'. Please ensure it contains a column called 'Accession' and a column called 'GeneID'.\")\n\n              } else{\n\n                x@datasets$geneID <- data.frame(Accession = geneIDFile[,\"Accession\"], GeneID = geneIDFile[,'GeneID'])\n\n              }\n\n            }\n\n            return(x)\n          }\n\n)\n",
    "created" : 1495206602103.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3529893149",
    "id" : "AB30D9D6",
    "lastKnownWriteTime" : 1497983844,
    "last_content_update" : 1498773224097,
    "path" : "~/Desktop/Doscheda/R/setData.R",
    "project_path" : "R/setData.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
{
    "collab_server" : "",
    "contents" : "#' Wrapper Function to run the entire Doscheda pipeline\n#'\n#' A wrapper for the whole Doscheda pipeline, if users want to avoid using the separate steps.\n#'\n#' @param dataFrame data.frame of the input data set\n#' @param chansVal number of channels / concentrations in experiment\n#' @param repsVal number of replicates in experiment\n#' @param dataTypeStr string describing the data type of input data set. This can be 'LFC' for log fold-changes, 'FC' for fold-changes and 'intensity' for peptide intensities\n#' @param modelTypeStr string describing the type of model applied. This can be 'linear' for a linear model or 'sigmoid' for a sigmoidal model\n#' @param PDBool boolean value indicating if the input data is from Proteome Discoverer 2.1 or not\n#' @param removePepsBool boolean value indicating if peptide removal will take place. Only valid if input data is peptide intensities\n#' @param incPDofPDBool boolean value indicating if the input data contais a pull-down of pull-down colum\n#' @param PDofPDname string with the same name as colulmn containing pull-down of pull-down data. NA if this is not applicable\n#' @param incGeneFileBool boolean value indicating if the data requires a protein accession to gene ID conversion file\n#' @param organismStr string giving the name of organism. the options are: 'H.sapiens', 'D. melanogaster', 'C. elegans', 'R. norvegicus', 'M. musculus'. This is only needed if PDbool is FALSE\n#' @param sigmoidConc vector of numerical values for concentrations of channels in the case of a sigmoidal fit\n#' @param pearsonThrshVal numerial value between -1 and 1 which determines the cut-off used to discard peptides during peptide removal\n#' @param dataChannels column names of dataFrame that correspond to data channels. These should be ordered in the format: rep1_concentration_0, ..., rep1_concentration_n, rep2_concentration_0, ...\n#' @param accessionChannel string that is the same as the column name for the protein accessions in dataFrame\n#' @param uniquePeps string that is the same as the column name for the number of unique peptides in dataFrame\n#' @param sequenceChannel string that is the same as the column name for the peptide sequences in dataFrame\n#' @param qualityChannel string that is the same as the column name for the peptide quality score in dataFrame\n#' @param pdofpdChannel string that is the same as the column name for the pull-down of pull-down data in dataFrame\n#' @param incGeneID boolean value indicating if a protein accession to gene ID file is supplied\n#' @param geneIDFile data.frame containing a protein accession to gene ID conversion file\n#' @param normType string indicating the type of normalisation that should take place ('loess', 'median', 'none')\n#' @return  object of class ChemoProtSet\n#'\n#' @export\n#' @examples\n#' channelNames <- c(\"Abundance..F1..126..Control..REP_1\",\n#'\"Abundance..F1..127..Sample..REP_1\",  \"Abundance..F1..128..Sample..REP_1\",\n#'\"Abundance..F1..129..Sample..REP_1\",  \"Abundance..F1..130..Sample..REP_1\",\n#'\"Abundance..F1..131..Sample..REP_1\",  \"Abundance..F2..126..Control..REP_2\",\n#'\"Abundance..F2..127..Sample..REP_2\", \"Abundance..F2..128..Sample..REP_2\",\n#'\"Abundance..F2..129..Sample..REP_2\",  \"Abundance..F2..130..Sample..REP_2\",\n#' \"Abundance..F2..131..Sample..REP_2\")\n#'\n#'ex <- runDoscheda(dataFrame = doschedaData, dataChannels = channelNames,\n#' chansVal = 6, repsVal = 2,dataTypeStr = 'intensity',\n#' modelTypeStr = 'linear',PDBool = FALSE,removePepsBool = FALSE,\n#' accessionChannel = \"Master.Protein.Accessions\",\n#' sequenceChannel = 'Sequence',qualityChannel = \"Qvality.PEP\",\n#' incPDofPDBool = FALSE, incGeneFileBool = FALSE,\n#'  organismStr = 'H.sapiens', pearsonThrshVal = 0.4)\n\n   runDoscheda <- function(dataFrame, dataChannels, accessionChannel, chansVal, repsVal, dataTypeStr, modelTypeStr, PDBool = TRUE,\n                              removePepsBool = NA, incPDofPDBool = FALSE, PDofPDname = NA,\n                              incGeneFileBool = FALSE, organismStr = 'h.sapiens', sigmoidConc = NA,\n                              pearsonThrshVal = 0.4,  uniquePeps = NA, sequenceChannel = NA,\n                              qualityChannel = NA, pdofpdChannel = NA, incGeneID = FALSE, geneIDFile = NA,\n                              normType = 'loess'){\n\n     ex <- new('ChemoProtSet')\n\n     ex<- setParameters(x = ex,chansVal = chansVal, repsVal = repsVal,\n                        dataTypeStr = dataTypeStr, modelTypeStr = modelTypeStr,\n                        PDBool = PDBool, removePepsBool = removePepsBool,\n                        incPDofPDBool = incPDofPDBool,PDofPDname =  PDofPDname,\n                        incGeneFileBool = incGeneFileBool, organismStr = organismStr,\n                        sigmoidConc = sigmoidConc, pearsonThrshVal = pearsonThrshVal)\n\n     ex<- setData(x = ex, dataFrame = dataFrame, dataChannels = dataChannels,\n                  accessionChannel = accessionChannel, uniquePeps = uniquePeps,\n                  sequenceChannel =  sequenceChannel, qualityChannel = qualityChannel,\n                  pdofpdChannel = pdofpdChannel, incGeneID =  incGeneFileBool,\n                  geneIDFile =  geneIDFile)\n\n     if(dataTypeStr  == 'intensity'){\n       ex <- removePeptides(ex, removePeps = removePepsBool)\n     }\n\n     ex <- runNormalisation(ex, normalise = normType)\n\n     ex <- fitModel(ex)\n\n     return(ex)\n   }\n\n",
    "created" : 1496852140669.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3924962179",
    "id" : "BAA62904",
    "lastKnownWriteTime" : 1498597565,
    "last_content_update" : 1498597565459,
    "path" : "~/Desktop/Doscheda/R/runDoscheda.R",
    "project_path" : "R/runDoscheda.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
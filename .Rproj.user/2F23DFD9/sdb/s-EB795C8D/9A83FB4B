{
    "collab_server" : "",
    "contents" : "#' Default plot for objects of class ChemoProtSet\n#'\n#'Description\n#'\n#' @param x object of class 'ChemoProtSet'\n#' @param sigmoidCoef the sigmoidal coeffcient, one of ('difference', 'slope', 'rb50'). Obselete if modelType is 'linear'\n#' @param ... other plotting options\n#' @return plot for objects of class ChemoProtSet\n#' @import ggplot2\n#' @import gridExtra\n#' @import reshape2\n#' @export\n\nplot.ChemoProtSet <- function(x, sigmoidCoef = 'rb50', ...) {\n\n  inherits(x, 'ChemoProtSet')\n\n  if(x@parameters$modelType == 'linear'){\n    data.merged<- x@finalData\n    ..count.. <- NULL\n    m0 <- ggplot2::ggplot(data.merged, ggplot2::aes(x=data.merged$P.Value_slope))\n    m0<-m0 + geom_histogram(ggplot2::aes(fill = ..count..),binwidth = 0.01) +\n      ggplot2::scale_fill_gradient(\"Count\", low = \"green\", high = \"red\")+\n      ggplot2::xlab(\"P.val slope\")\n\n    ..count.. <- NULL\n    m1 <- ggplot2::ggplot(data.merged, ggplot2::aes(x=data.merged$P.Value_intercept))\n    m1<- m1 + geom_histogram(ggplot2::aes(fill = ..count..),binwidth = 0.01) +\n      ggplot2::scale_fill_gradient(\"Count\", low = \"green\", high = \"red\")+\n      ggplot2::xlab(\"Pval intercept\")\n\n    m2 <- ggplot2::ggplot(data.merged, ggplot2::aes(x=data.merged$P.Value_quadratic))\n    m2 <- m2 + geom_histogram(ggplot2::aes(fill = ..count..),binwidth = 0.01) +\n      ggplot2::scale_fill_gradient(\"Count\", low = \"green\", high = \"red\")+\n      ggplot2::xlab(\"Pval quadratic\")\n\n    gridExtra::grid.arrange(m0,m1,m2)\n\n  } else {\n\n\n\n    data_merged_2 <- x@finalData\n    conc<- x@parameters$sigmoidConc\n    topperc <- 30 #difference in % between top and bottom\n\n    if(x@parameters$dataType == 'intensity'){\n\n      pred.names <- paste0('predX',1:(x@parameters$chans -1))\n      final.Names <- paste0('rep1_C',0:(x@parameters$chans - 2))\n      diffinter<- data_merged_2[(data_merged_2$predX1 - data_merged_2[,paste(\"predX\",(x@parameters$chans-1),sep = \"\")]) > topperc & data_merged_2$predX1 <= 100, ]\n\n    } else {\n      pred.names <- paste0('predX',1:(x@parameters$chans))\n      final.Names <- paste0('rep1_C',0:(x@parameters$chans - 1))\n      diffinter<- data_merged_2[(data_merged_2$predX1 - data_merged_2[,paste(\"predX\",(x@parameters$chans),sep = \"\")]) > topperc & data_merged_2$predX1 <= 100, ]\n\n    }\n\n\n    if(sigmoidCoef == 'difference'){\n\n      if(nrow(diffinter) > 0){\n        Diff_Top_bottom_pred <- shape_for_ggplot_pred(diffinter,log2(conc),pred.names)\n        Diff_Top_bottom_perc <- shape_for_ggplot_perc(diffinter,log2(conc),final.Names)\n        what<-c(\"(Top - Bottom) >\")\n        GeneID <- factor(Diff_Top_bottom_pred$GeneID)\n        value<- NULL\n        Diff_Top_bottom<-ggplot2::ggplot()+\n          ggplot2::geom_line(data = Diff_Top_bottom_pred, ggplot2::aes(x=x,y=value, colour = GeneID), size = 1) +\n          ggplot2::geom_point(data = Diff_Top_bottom_perc, ggplot2::aes(x=x,y=value, colour=Diff_Top_bottom_perc$GeneID)) +\n          ggplot2::labs(title=paste(what,topperc,sep=\"\"))\n\n        Diff_Top_bottom\n      }else{\n        Diff_Top_bottom<-ggplot2::ggplot()+\n          ggplot2::labs(title=paste(\"No significant Top-Bottom >\" ,topperc,\"%\",\"\\n\",\"has been found\", sep=\"\"))\n      }\n    } else if(sigmoidCoef == 'slope'){\n\n      ## next plot (SLOPE)\n\n      top<-15 #max prot to plot\n\n\n      if(x@parameters$dataType == 'intensity'){\n        pred.names <- paste0('predX',1:(x@parameters$chans -1))\n        final.Names <- paste0('rep1_C',0:(x@parameters$chans - 2))\n      }else{\n        pred.names <- paste0('predX',1:(x@parameters$chans))\n        final.Names <- paste0('rep1_C',0:(x@parameters$chans - 1))\n      }\n\n      data_merged_2 <- x@finalData\n\n      #Here make the subselections for using the ggplot functions SLOPE\n      slope<-stats::na.omit(data_merged_2[data_merged_2$SlopePval<0.05 ,])\n      slope_ordered<-stats::na.omit(slope[order(slope$SlopePval, decreasing = FALSE),][1:top,])\n      if(nrow(slope_ordered)>0){\n        slope_pred<-shape_for_ggplot_pred(slope_ordered,log10(conc),pred.names)\n        slope_perc<- shape_for_ggplot_perc(slope_ordered,log10(conc),final.Names)\n        what<-c(\"Slope (p.val) \")\n        GeneID <- factor(slope_pred$GeneID)\n        Slope_pl<-ggplot2::ggplot()+\n          ggplot2::geom_line(data = slope_pred, ggplot2::aes(x=x,y = value, colour = GeneID), size = 1) +\n          ggplot2::geom_point(data = slope_perc, ggplot2::aes(x=x,y = value,colour=slope_perc$GeneID))+\n          ggplot2::labs(title=paste(what,\"Top\",top,sep=\"\"))\n        Slope_pl\n      }else{Slope_pl<-ggplot2::ggplot()+\n        ggplot2::labs(title=\"No significant Sigmoidal Slope has been found\")\n      }\n\n    } else if(sigmoidCoef == 'rb50'){\n\n      ##### next plot (RB50)\n\n\n      top<-15 #max prot to plot\n\n      # RB50<-na.omit(data_merged_2[data_merged_2$RB50Err < as.numeric(summary(data_merged_2$RB50Err)[5]) & data_merged_2$RB50Pval<0.05 & data_merged_2$predX1-data_merged_2$predX9 >0 & data_merged_2$predX1 <= 100,])\n      RB50 <- data.frame(stats::na.omit(data_merged_2[data_merged_2$RB50Err < as.numeric(summary(data_merged_2$RB50Err)[5]) & data_merged_2$RB50Pval < 0.05\n                                                      & data_merged_2$predX1-data_merged_2[,paste0('predX',(x@parameters$chans - 1))] >0 & data_merged_2$predX1 <= 100,]))\n\n\n      RB50_ordered<- stats::na.omit(RB50[order(RB50$RB50Pval, decreasing = FALSE),][1:top,])\n\n      if(nrow(RB50_ordered)>0){\n        RB50_pred<-shape_for_ggplot_pred(RB50_ordered,log10(conc),pred.names)\n        RB50_perc<-shape_for_ggplot_perc(RB50_ordered,log10(conc),final.Names)\n        what<-c(\"RB50 (p.val) \")\n        GeneID <- factor(RB50_pred$GeneID)\n        RB50_pl<-ggplot2::ggplot()+\n          ggplot2::geom_line(data = RB50_pred, ggplot2::aes(x=x,y=value, colour = GeneID), size = 1) +\n          ggplot2::geom_point(data = RB50_perc, ggplot2::aes(x=x,y=value,colour=RB50_perc$GeneID))+\n          ggplot2::labs(title=paste(what,\"Top\",top,sep=\"\"))\n        RB50_pl\n      }else{\n        RB50_pl<-ggplot2::ggplot()+\n          ggplot2::labs(title=\"No significant RB50 has been found\")\n        print(RB50_pl)\n      }\n    }else{\n      message('sigmoidCoef not accepted please enter one of: \"difference\", \"slope\" or \"rb50\"')\n    }\n\n\n\n  }\n\n}\n",
    "created" : 1497204289105.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1041372638",
    "id" : "9A83FB4B",
    "lastKnownWriteTime" : 1498779461,
    "last_content_update" : 1498779461628,
    "path" : "~/Desktop/Doscheda/R/plot.ChemoProtSet.R",
    "project_path" : "R/plot.ChemoProtSet.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 18,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}